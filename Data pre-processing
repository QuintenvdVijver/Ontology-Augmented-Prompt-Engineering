import xml.etree.ElementTree as ET

def convert_semeval14_to_15_16_format(semeval14_path):
    # Converts SemEval14 dataset to SemEval15/16 format 
    
    tree = ET.parse(semeval14_path)
    root = tree.getroot()
    
    # Create a new root element for the new structure
    new_root = ET.Element("Reviews")
    review = ET.SubElement(new_root, "Review")
    sentences = ET.SubElement(review, "sentences")
    
    for sentence in root.findall("sentence"):
        sentence_id = sentence.get("id")
        text = sentence.find("text").text

        new_sentence = ET.SubElement(sentences, "sentence", id=sentence_id)
        ET.SubElement(new_sentence, "text").text = text
        
        opinions = ET.SubElement(new_sentence, "Opinions")

        # Convert <aspectTerms> into <Opinions>
        aspect_terms = sentence.find("aspectTerms")
        if aspect_terms is not None:
            for aspect in aspect_terms.findall("aspectTerm"):
                target = aspect.get("term")
                polarity = aspect.get("polarity")
                from_idx = aspect.get("from")
                to_idx = aspect.get("to")
                ET.SubElement(opinions, "Opinion", target=target, category="", polarity=polarity, from_=from_idx, to=to_idx)

        # Convert <aspectCategories> into <Opinions>
        aspect_categories = sentence.find("aspectCategories")
        if aspect_categories is not None:
            for category in aspect_categories.findall("aspectCategory"):
                category_name = category.get("category")
                polarity = category.get("polarity")
                ET.SubElement(opinions, "Opinion", target="", category=category_name, polarity=polarity, from_="-1", to="-1")

    return new_root

def merge_datasets(semeval14_path, semeval15_path, semeval16_path, output_path):
    # Merges SemEval14 (converted), SemEval15, and SemEval16 into a unified XML file
    
    # Convert SemEval14 first
    converted_semeval14 = convert_semeval14_to_15_16_format(semeval14_path)

    # Load SemEval15
    tree_15 = ET.parse(semeval15_path)
    root_15 = tree_15.getroot()

    # Load SemEval16
    tree_16 = ET.parse(semeval16_path)
    root_16 = tree_16.getroot()

    # Merge all into a single <Reviews> root
    merged_root = ET.Element("Reviews")
    merged_root.extend(converted_semeval14.findall("Review"))
    merged_root.extend(root_15.findall("Review"))
    merged_root.extend(root_16.findall("Review"))

    # Write to output file
    tree = ET.ElementTree(merged_root)
    tree.write(output_path, encoding="utf-8", xml_declaration=True)

# File paths
semeval14_file = "C:/Users/quint/Documents/Rotterdam/ROTTERDAM 2024-2025/Block 4 - Econometrics Seminar/Research/Data/SemEval data/SemEval14_Restaurants_Train.xml"
semeval15_file = "C:/Users/quint/Documents/Rotterdam/ROTTERDAM 2024-2025/Block 4 - Econometrics Seminar/Research/Data/SemEval data/SemEval15_Restaurants_Train.xml"
semeval16_file = "C:/Users/quint/Documents/Rotterdam/ROTTERDAM 2024-2025/Block 4 - Econometrics Seminar/Research/Data/SemEval data/SemEval16_Restaurants_Train.xml"
merged_output_file = "C:/Users/quint/Documents/Rotterdam/ROTTERDAM 2024-2025/Block 4 - Econometrics Seminar/Research/Data/Merged_SemEval_Restaurants_Train.xml"

# Run merging process
merge_datasets(semeval14_file, semeval15_file, semeval16_file, merged_output_file)
print(f"Merged dataset saved to: {merged_output_file}")
